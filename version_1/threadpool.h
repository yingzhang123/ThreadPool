//#pragma once               // 方法一、 防止头文件被重复包含
#ifndef THREADPOOL_H         // 方法二、 防止头文件被重复包含
#define THREADPOOL_H

#include<vector>
#include<queue>
#include<memory>
#include<atomic>
#include<mutex>
#include<condition_variable>
#include<functional>
#include<unordered_map>

// C++17 标准中引入的 std::any 类型。其主要目的是允许一个变量在运行时持有并管理任何类型的值，同时也提供了类型安全的方式来检索或修改存储的值
//Any类型：可以接收任意数据的类型  (仿照C++17的Any类型)
class Any
{
public:
	Any() = default;
	~Any() = default;
	Any(const Any&) = delete;
	Any& operator=(const Any&) = delete;
	Any(Any&&) = default;
	Any& operator=(Any&&) = default;
		
	// 这个构造函数可以让Any类型接收任意其它的数据
	template<typename T>
	Any(T data) :base_(std::make_unique<Derive<T>>(data))   // Any(T data) :base_(new Derive<T>(data))
	{

	}

	// 这个方法能把Any对象里面存储的data数据提取出来
	template<typename T>
	T cast_()
	{
		// 我们怎么从base_找到它所指向的Derive对象，从它里面取出data成员变量
		// 基类指针 =》 派生类指针   RTTI
		Derive<T>* pd = dynamic_cast<Derive<T>*>(base_.get());
		if (pd == nullptr)
		{
			throw "type is unmatch!";
		}
		return pd->data_;
	}

private:
	// 基类类型
	class Base
	{
	public:
		virtual ~Base() = default;
	};

	// 派生类类型
	template<class T>
	class Derive :public Base
	{
	public:
		Derive(T data) :data_(data)
		{

		}
		T data_;
	};

private:
	// 定义一个基类指针
	std::unique_ptr<Base> base_;
};

// Semaphore  实现一个信号量类  （类似C++20里面的信号量）
class Semaphore
{
public:
	Semaphore(int limit=0) :resLimit_(limit)
	{

	}
	~Semaphore() = default;
	// 获取一个信号量资源
	void post()
	{
		std::unique_lock<std::mutex> lock(mtx_);
		resLimit_++;

		cv_.notify_all();
	}
	// 增加一个信号量资源
	void wait()
	{
		std::unique_lock<std::mutex> lock(mtx_);
		// 等待信号量有资源，没有资源的话，会阻塞当前线程
		cv_.wait(lock, [&]()->bool {return resLimit_ > 0; });
		resLimit_--;
	}
private:
	int resLimit_;   // 资源计数
	std::mutex mtx_;
	std::condition_variable cv_;
};


// Task类型的前置声明
class Task;

// 实现接收提交到线程池的task任务执行完成后的返回值类型Result
class Result
{
public:
	Result(std::shared_ptr<Task> task, bool isValid=true);
	~Result() = default;

	// 问题一：setVal方法，获取任务执行完的返回值的
	void setVal(Any any);

	// 问题二：get方法，用户调用这个方法获取task的返回值
	Any get();
private:
	Any any_; // 存储任务的返回值
	Semaphore sem_; // 线程通信信号量
	std::shared_ptr<Task> task_; //指向对应获取返回值的任务对象 
	std::atomic_bool isValid_; // 返回值是否有效
};


// 任务抽象基类
class Task
{
public:
	Task();
	~Task() = default;
	void exec();
	void setResult(Result* res);

	// 用户可以自定义任意任务类型，从Task继承，重写run方法，实现自定义任务处理
	virtual Any run() = 0;

private:
	Result* result_; // Result对象的生命周期  >  Task的          这里不能用智能指针（会造成交叉引用====》内存泄漏）
};


// 线程池支持的模式
enum class PoolMode
{
	MODE_FIXED,         // 固定数量的线程
	MODE_CACHED,        // 线程数量可动态增长
};

// 线程类型
class Thread
{
public:
	//线程函数对象类型
	using ThreadFunc = std::function<void(int)>;
	//构造函数
	Thread(ThreadFunc func);
	// 析构函数
	~Thread();
	// 启动线程
	void start();
	// 获取线程id
	int getId()const;
private:
	ThreadFunc func_;
	static int generateId_;
	int threadId_;  // 保存线程id
};


/*
example:
ThreadPool pool;
pool.start(4);

class MyTask : public Task
{
	public:
		void run() { // 线程代码... }
};

pool.submitTask(std::make_shared<MyTask>());
*/

// 线程池类型
class ThreadPool
{
public:
	// 线程池构造
	ThreadPool();
	// 线程池析构
	~ThreadPool();

	// 设置线程池工作模式
	void setMode(PoolMode mode);
	// 设置task任务队列的上限阈值
	void setTaskQueMaxThreshHold(size_t threshold);
	// 设置线程池cached模式下线程阈值
	void setThreadSizeThreshHoid(int threshold);
	// 给线程池提交任务
	Result submitTask(std::shared_ptr<Task> sp);

	// 开启线程池
	void start(size_t initThreadSize= std::thread::hardware_concurrency());    // std::thread::hardware_concurrency() 获取实现支持的并发线程数量(CPU 核心数量)

	ThreadPool(const ThreadPool&) = delete;               //杜绝线程池对象的拷贝构造和赋值构造函数，要使用线程池直接构造即可
	ThreadPool& operator=(const ThreadPool&) = delete;
private:
	//定义线程函数
	void threadFunc(int threadid);

	// 检测pool的运行状态
	bool checkRunningState() const;
private:
	//std::vector<Thread*> threads_;    //线程列表
	//std::vector<std::unique_ptr<Thread>> threads_;  //线程列表
	std::unordered_map<int, std::unique_ptr<Thread>> threads_;   //线程列表

	size_t initThreadSize_;             // 初始的线程数量
	std::atomic_int curThreadSize_;     // 记录当前线程池里面线程的总数量
	int threadSizeThresHold_;           //线程数量上限 
	std::atomic_int idleThreadSize_;    //记录空闲线程的数量

	std::queue<std::shared_ptr<Task>> taskQue_;         // 任务队列           不能存Task的裸指针std::queue<Task*> ===》如果用户传进来的是临时对象，那将导致严重问题，使用智能指针强制用户不能传入右值(临时对象)
	std::atomic_uint taskSize_;       //任务的数量
	size_t taskQueMaxThreshHold_;     // 任务队列数量上限阈值

	std::mutex taskQueMtx_;                    // 保证任务队列线程安全
	std::condition_variable notFull_;          // 表示任务队列不满
	std::condition_variable notEmpty_;         // 表示任务队列不空
	std::condition_variable exitCond_;     // 等到线程资源全部回收

	PoolMode poolMode_;                  // 当前线程池的工作模式
	std::atomic_bool isPoolRunning_;       //表示当前线程池的启动状态
};




#endif // !THREADPOOL_H


